WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/anders/ojlab.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
# JMH version: 1.22
# VM version: JDK 13.0.1, OpenJDK 64-Bit Server VM, 13.0.1+9
# VM invoker: /home/anders/jdk-13.0.1+9/bin/java
# VM options: -Xmx6g
# Warmup: 7 iterations, 10 s each
# Measurement: 3 iterations, 10 s each
# Timeout: 1 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.ojalgo.benchmark.lab.FillByMultiplying.execute
# Parameters: (dim = 100, lib = ACM)

# Run progress: 0.00% complete, ETA 00:46:40
# Fork: 1 of 1
# Warmup Iteration   1: 37155.936 ops/min
# Warmup Iteration   2: 37720.938 ops/min
# Warmup Iteration   3: 37968.057 ops/min
# Warmup Iteration   4: 37706.080 ops/min
# Warmup Iteration   5: 38067.678 ops/min
# Warmup Iteration   6: 37931.424 ops/min
# Warmup Iteration   7: 37114.430 ops/min
Iteration   1: 37154.040 ops/min
Iteration   2: 37078.653 ops/min
Iteration   3: 37114.969 ops/min


Result "org.ojalgo.benchmark.lab.FillByMultiplying.execute":
  37115.887 ±(99.9%) 687.828 ops/min [Average]
  (min, avg, max) = (37078.653, 37115.887, 37154.040), stdev = 37.702
  CI (99.9%): [36428.059, 37803.716] (assumes normal distribution)


# JMH version: 1.22
# VM version: JDK 13.0.1, OpenJDK 64-Bit Server VM, 13.0.1+9
# VM invoker: /home/anders/jdk-13.0.1+9/bin/java
# VM options: -Xmx6g
# Warmup: 7 iterations, 10 s each
# Measurement: 3 iterations, 10 s each
# Timeout: 1 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.ojalgo.benchmark.lab.FillByMultiplying.execute
# Parameters: (dim = 100, lib = EJML)

# Run progress: 3.57% complete, ETA 00:45:14
# Fork: 1 of 1
# Warmup Iteration   1: 86998.917 ops/min
# Warmup Iteration   2: 87152.210 ops/min
# Warmup Iteration   3: 87153.524 ops/min
# Warmup Iteration   4: 87556.612 ops/min
# Warmup Iteration   5: 87703.753 ops/min
# Warmup Iteration   6: 87799.985 ops/min
# Warmup Iteration   7: 87747.271 ops/min
Iteration   1: 87789.123 ops/min
Iteration   2: 87747.838 ops/min
Iteration   3: 87835.060 ops/min


Result "org.ojalgo.benchmark.lab.FillByMultiplying.execute":
  87790.673 ±(99.9%) 796.002 ops/min [Average]
  (min, avg, max) = (87747.838, 87790.673, 87835.060), stdev = 43.632
  CI (99.9%): [86994.672, 88586.675] (assumes normal distribution)


# JMH version: 1.22
# VM version: JDK 13.0.1, OpenJDK 64-Bit Server VM, 13.0.1+9
# VM invoker: /home/anders/jdk-13.0.1+9/bin/java
# VM options: -Xmx6g
# Warmup: 7 iterations, 10 s each
# Measurement: 3 iterations, 10 s each
# Timeout: 1 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.ojalgo.benchmark.lab.FillByMultiplying.execute
# Parameters: (dim = 100, lib = ojAlgo)

# Run progress: 7.14% complete, ETA 00:43:33
# Fork: 1 of 1
# Warmup Iteration   1: 83889.132 ops/min
# Warmup Iteration   2: 86522.176 ops/min
# Warmup Iteration   3: 86528.293 ops/min
# Warmup Iteration   4: 86212.256 ops/min
# Warmup Iteration   5: 86151.838 ops/min
# Warmup Iteration   6: 87089.031 ops/min
# Warmup Iteration   7: 86943.202 ops/min
Iteration   1: 87695.252 ops/min
Iteration   2: 87037.517 ops/min
Iteration   3: 87244.489 ops/min


Result "org.ojalgo.benchmark.lab.FillByMultiplying.execute":
  87325.753 ±(99.9%) 6135.606 ops/min [Average]
  (min, avg, max) = (87037.517, 87325.753, 87695.252), stdev = 336.313
  CI (99.9%): [81190.147, 93461.358] (assumes normal distribution)


# JMH version: 1.22
# VM version: JDK 13.0.1, OpenJDK 64-Bit Server VM, 13.0.1+9
# VM invoker: /home/anders/jdk-13.0.1+9/bin/java
# VM options: -Xmx6g
# Warmup: 7 iterations, 10 s each
# Measurement: 3 iterations, 10 s each
# Timeout: 1 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.ojalgo.benchmark.lab.FillByMultiplying.execute
# Parameters: (dim = 100, lib = MTJ)

# Run progress: 10.71% complete, ETA 00:41:53
# Fork: 1 of 1
# Warmup Iteration   1: Nov 04, 2019 8:36:18 PM com.github.fommil.netlib.BLAS <clinit>
WARNING: Failed to load implementation from: com.github.fommil.netlib.NativeSystemBLAS
Nov 04, 2019 8:36:18 PM com.github.fommil.jni.JniLoader liberalLoad
INFO: successfully loaded /tmp/jniloader13168516672369271508netlib-native_ref-linux-x86_64.so
103595.669 ops/min
# Warmup Iteration   2: 104870.377 ops/min
# Warmup Iteration   3: 105092.644 ops/min
# Warmup Iteration   4: 105172.296 ops/min
# Warmup Iteration   5: 104731.092 ops/min
# Warmup Iteration   6: 104818.251 ops/min
# Warmup Iteration   7: 104963.208 ops/min
Iteration   1: 104954.775 ops/min
Iteration   2: 104585.915 ops/min
Iteration   3: 104841.367 ops/min


Result "org.ojalgo.benchmark.lab.FillByMultiplying.execute":
  104794.019 ±(99.9%) 3446.852 ops/min [Average]
  (min, avg, max) = (104585.915, 104794.019, 104954.775), stdev = 188.934
  CI (99.9%): [101347.167, 108240.872] (assumes normal distribution)


# JMH version: 1.22
# VM version: JDK 13.0.1, OpenJDK 64-Bit Server VM, 13.0.1+9
# VM invoker: /home/anders/jdk-13.0.1+9/bin/java
# VM options: -Xmx6g
# Warmup: 7 iterations, 10 s each
# Measurement: 3 iterations, 10 s each
# Timeout: 1 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.ojalgo.benchmark.lab.FillByMultiplying.execute
# Parameters: (dim = 150, lib = ACM)

# Run progress: 14.29% complete, ETA 00:40:12
# Fork: 1 of 1
# Warmup Iteration   1: 11446.216 ops/min
# Warmup Iteration   2: 11651.827 ops/min
# Warmup Iteration   3: 11587.049 ops/min
# Warmup Iteration   4: 11619.882 ops/min
# Warmup Iteration   5: 11688.396 ops/min
# Warmup Iteration   6: 11644.452 ops/min
# Warmup Iteration   7: 11222.015 ops/min
Iteration   1: 11708.297 ops/min
Iteration   2: 11665.296 ops/min
Iteration   3: 11642.657 ops/min


Result "org.ojalgo.benchmark.lab.FillByMultiplying.execute":
  11672.083 ±(99.9%) 608.288 ops/min [Average]
  (min, avg, max) = (11642.657, 11672.083, 11708.297), stdev = 33.342
  CI (99.9%): [11063.796, 12280.371] (assumes normal distribution)


# JMH version: 1.22
# VM version: JDK 13.0.1, OpenJDK 64-Bit Server VM, 13.0.1+9
# VM invoker: /home/anders/jdk-13.0.1+9/bin/java
# VM options: -Xmx6g
# Warmup: 7 iterations, 10 s each
# Measurement: 3 iterations, 10 s each
# Timeout: 1 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.ojalgo.benchmark.lab.FillByMultiplying.execute
# Parameters: (dim = 150, lib = EJML)

# Run progress: 17.86% complete, ETA 00:38:31
# Fork: 1 of 1
# Warmup Iteration   1: 26021.584 ops/min
# Warmup Iteration   2: 26110.746 ops/min
# Warmup Iteration   3: 26206.605 ops/min
# Warmup Iteration   4: 26163.381 ops/min
# Warmup Iteration   5: 26172.500 ops/min
# Warmup Iteration   6: 26210.317 ops/min
# Warmup Iteration   7: 26177.255 ops/min
Iteration   1: 26203.610 ops/min
Iteration   2: 26165.077 ops/min
Iteration   3: 26178.902 ops/min


Result "org.ojalgo.benchmark.lab.FillByMultiplying.execute":
  26182.530 ±(99.9%) 356.135 ops/min [Average]
  (min, avg, max) = (26165.077, 26182.530, 26203.610), stdev = 19.521
  CI (99.9%): [25826.395, 26538.665] (assumes normal distribution)


# JMH version: 1.22
# VM version: JDK 13.0.1, OpenJDK 64-Bit Server VM, 13.0.1+9
# VM invoker: /home/anders/jdk-13.0.1+9/bin/java
# VM options: -Xmx6g
# Warmup: 7 iterations, 10 s each
# Measurement: 3 iterations, 10 s each
# Timeout: 1 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.ojalgo.benchmark.lab.FillByMultiplying.execute
# Parameters: (dim = 150, lib = ojAlgo)

# Run progress: 21.43% complete, ETA 00:36:50
# Fork: 1 of 1
# Warmup Iteration   1: 29586.047 ops/min
# Warmup Iteration   2: 30776.258 ops/min
# Warmup Iteration   3: 30800.540 ops/min
# Warmup Iteration   4: 30687.878 ops/min
# Warmup Iteration   5: 29740.340 ops/min
# Warmup Iteration   6: 30284.152 ops/min
# Warmup Iteration   7: 30782.620 ops/min
Iteration   1: 30873.251 ops/min
Iteration   2: 30869.542 ops/min
Iteration   3: 30969.256 ops/min


Result "org.ojalgo.benchmark.lab.FillByMultiplying.execute":
  30904.017 ±(99.9%) 1031.308 ops/min [Average]
  (min, avg, max) = (30869.542, 30904.017, 30969.256), stdev = 56.529
  CI (99.9%): [29872.709, 31935.324] (assumes normal distribution)


# JMH version: 1.22
# VM version: JDK 13.0.1, OpenJDK 64-Bit Server VM, 13.0.1+9
# VM invoker: /home/anders/jdk-13.0.1+9/bin/java
# VM options: -Xmx6g
# Warmup: 7 iterations, 10 s each
# Measurement: 3 iterations, 10 s each
# Timeout: 1 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.ojalgo.benchmark.lab.FillByMultiplying.execute
# Parameters: (dim = 150, lib = MTJ)

# Run progress: 25.00% complete, ETA 00:35:10
# Fork: 1 of 1
# Warmup Iteration   1: Nov 04, 2019 8:43:00 PM com.github.fommil.netlib.BLAS <clinit>
WARNING: Failed to load implementation from: com.github.fommil.netlib.NativeSystemBLAS
Nov 04, 2019 8:43:00 PM com.github.fommil.jni.JniLoader liberalLoad
INFO: successfully loaded /tmp/jniloader2195788872587313040netlib-native_ref-linux-x86_64.so
29983.467 ops/min
# Warmup Iteration   2: 30361.879 ops/min
# Warmup Iteration   3: 30378.726 ops/min
# Warmup Iteration   4: 30395.370 ops/min
# Warmup Iteration   5: 30195.000 ops/min
# Warmup Iteration   6: 30491.334 ops/min
# Warmup Iteration   7: 30402.076 ops/min
Iteration   1: 30404.690 ops/min
Iteration   2: 30484.430 ops/min
Iteration   3: 30457.301 ops/min


Result "org.ojalgo.benchmark.lab.FillByMultiplying.execute":
  30448.807 ±(99.9%) 739.656 ops/min [Average]
  (min, avg, max) = (30404.690, 30448.807, 30484.430), stdev = 40.543
  CI (99.9%): [29709.151, 31188.463] (assumes normal distribution)


# JMH version: 1.22
# VM version: JDK 13.0.1, OpenJDK 64-Bit Server VM, 13.0.1+9
# VM invoker: /home/anders/jdk-13.0.1+9/bin/java
# VM options: -Xmx6g
# Warmup: 7 iterations, 10 s each
# Measurement: 3 iterations, 10 s each
# Timeout: 1 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.ojalgo.benchmark.lab.FillByMultiplying.execute
# Parameters: (dim = 200, lib = ACM)

# Run progress: 28.57% complete, ETA 00:33:29
# Fork: 1 of 1
# Warmup Iteration   1: 4722.073 ops/min
# Warmup Iteration   2: 4775.964 ops/min
# Warmup Iteration   3: 4787.872 ops/min
# Warmup Iteration   4: 4788.482 ops/min
# Warmup Iteration   5: 4774.545 ops/min
# Warmup Iteration   6: 4785.758 ops/min
# Warmup Iteration   7: 4796.192 ops/min
Iteration   1: 4781.350 ops/min
Iteration   2: 4779.684 ops/min
Iteration   3: 4768.325 ops/min


Result "org.ojalgo.benchmark.lab.FillByMultiplying.execute":
  4776.453 ±(99.9%) 129.321 ops/min [Average]
  (min, avg, max) = (4768.325, 4776.453, 4781.350), stdev = 7.089
  CI (99.9%): [4647.132, 4905.774] (assumes normal distribution)


# JMH version: 1.22
# VM version: JDK 13.0.1, OpenJDK 64-Bit Server VM, 13.0.1+9
# VM invoker: /home/anders/jdk-13.0.1+9/bin/java
# VM options: -Xmx6g
# Warmup: 7 iterations, 10 s each
# Measurement: 3 iterations, 10 s each
# Timeout: 1 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.ojalgo.benchmark.lab.FillByMultiplying.execute
# Parameters: (dim = 200, lib = EJML)

# Run progress: 32.14% complete, ETA 00:31:49
# Fork: 1 of 1
# Warmup Iteration   1: 11019.490 ops/min
# Warmup Iteration   2: 11082.058 ops/min
# Warmup Iteration   3: 11055.311 ops/min
# Warmup Iteration   4: 11120.160 ops/min
# Warmup Iteration   5: 11099.038 ops/min
# Warmup Iteration   6: 11068.435 ops/min
# Warmup Iteration   7: 11109.726 ops/min
Iteration   1: 11139.837 ops/min
Iteration   2: 11111.797 ops/min
Iteration   3: 11106.585 ops/min


Result "org.ojalgo.benchmark.lab.FillByMultiplying.execute":
  11119.406 ±(99.9%) 326.273 ops/min [Average]
  (min, avg, max) = (11106.585, 11119.406, 11139.837), stdev = 17.884
  CI (99.9%): [10793.134, 11445.679] (assumes normal distribution)


# JMH version: 1.22
# VM version: JDK 13.0.1, OpenJDK 64-Bit Server VM, 13.0.1+9
# VM invoker: /home/anders/jdk-13.0.1+9/bin/java
# VM options: -Xmx6g
# Warmup: 7 iterations, 10 s each
# Measurement: 3 iterations, 10 s each
# Timeout: 1 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.ojalgo.benchmark.lab.FillByMultiplying.execute
# Parameters: (dim = 200, lib = ojAlgo)

# Run progress: 35.71% complete, ETA 00:30:08
# Fork: 1 of 1
# Warmup Iteration   1: 14856.867 ops/min
# Warmup Iteration   2: 15365.113 ops/min
# Warmup Iteration   3: 15319.587 ops/min
# Warmup Iteration   4: 15420.633 ops/min
# Warmup Iteration   5: 14897.054 ops/min
# Warmup Iteration   6: 15082.082 ops/min
# Warmup Iteration   7: 15547.030 ops/min
Iteration   1: 15501.233 ops/min
Iteration   2: 15535.338 ops/min
Iteration   3: 15514.806 ops/min


Result "org.ojalgo.benchmark.lab.FillByMultiplying.execute":
  15517.125 ±(99.9%) 313.254 ops/min [Average]
  (min, avg, max) = (15501.233, 15517.125, 15535.338), stdev = 17.171
  CI (99.9%): [15203.871, 15830.380] (assumes normal distribution)


# JMH version: 1.22
# VM version: JDK 13.0.1, OpenJDK 64-Bit Server VM, 13.0.1+9
# VM invoker: /home/anders/jdk-13.0.1+9/bin/java
# VM options: -Xmx6g
# Warmup: 7 iterations, 10 s each
# Measurement: 3 iterations, 10 s each
# Timeout: 1 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.ojalgo.benchmark.lab.FillByMultiplying.execute
# Parameters: (dim = 200, lib = MTJ)

# Run progress: 39.29% complete, ETA 00:28:28
# Fork: 1 of 1
# Warmup Iteration   1: Nov 04, 2019 8:49:42 PM com.github.fommil.netlib.BLAS <clinit>
WARNING: Failed to load implementation from: com.github.fommil.netlib.NativeSystemBLAS
Nov 04, 2019 8:49:42 PM com.github.fommil.jni.JniLoader liberalLoad
INFO: successfully loaded /tmp/jniloader4659299224752337980netlib-native_ref-linux-x86_64.so
13701.360 ops/min
# Warmup Iteration   2: 13903.401 ops/min
# Warmup Iteration   3: 13948.425 ops/min
# Warmup Iteration   4: 13931.135 ops/min
# Warmup Iteration   5: 13935.940 ops/min
# Warmup Iteration   6: 13936.924 ops/min
# Warmup Iteration   7: 13864.359 ops/min
Iteration   1: 13860.500 ops/min
Iteration   2: 13926.252 ops/min
Iteration   3: 13943.883 ops/min


Result "org.ojalgo.benchmark.lab.FillByMultiplying.execute":
  13910.212 ±(99.9%) 801.711 ops/min [Average]
  (min, avg, max) = (13860.500, 13910.212, 13943.883), stdev = 43.944
  CI (99.9%): [13108.501, 14711.923] (assumes normal distribution)


# JMH version: 1.22
# VM version: JDK 13.0.1, OpenJDK 64-Bit Server VM, 13.0.1+9
# VM invoker: /home/anders/jdk-13.0.1+9/bin/java
# VM options: -Xmx6g
# Warmup: 7 iterations, 10 s each
# Measurement: 3 iterations, 10 s each
# Timeout: 1 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.ojalgo.benchmark.lab.FillByMultiplying.execute
# Parameters: (dim = 350, lib = ACM)

# Run progress: 42.86% complete, ETA 00:26:47
# Fork: 1 of 1
# Warmup Iteration   1: 846.266 ops/min
# Warmup Iteration   2: 855.014 ops/min
# Warmup Iteration   3: 860.804 ops/min
# Warmup Iteration   4: 865.414 ops/min
# Warmup Iteration   5: 862.977 ops/min
# Warmup Iteration   6: 859.105 ops/min
# Warmup Iteration   7: 858.820 ops/min
Iteration   1: 861.147 ops/min
Iteration   2: 861.863 ops/min
Iteration   3: 859.090 ops/min


Result "org.ojalgo.benchmark.lab.FillByMultiplying.execute":
  860.700 ±(99.9%) 26.260 ops/min [Average]
  (min, avg, max) = (859.090, 860.700, 861.863), stdev = 1.439
  CI (99.9%): [834.440, 886.960] (assumes normal distribution)


# JMH version: 1.22
# VM version: JDK 13.0.1, OpenJDK 64-Bit Server VM, 13.0.1+9
# VM invoker: /home/anders/jdk-13.0.1+9/bin/java
# VM options: -Xmx6g
# Warmup: 7 iterations, 10 s each
# Measurement: 3 iterations, 10 s each
# Timeout: 1 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.ojalgo.benchmark.lab.FillByMultiplying.execute
# Parameters: (dim = 350, lib = EJML)

# Run progress: 46.43% complete, ETA 00:25:07
# Fork: 1 of 1
# Warmup Iteration   1: 2054.578 ops/min
# Warmup Iteration   2: 2071.603 ops/min
# Warmup Iteration   3: 2068.488 ops/min
# Warmup Iteration   4: 2063.423 ops/min
# Warmup Iteration   5: 2066.912 ops/min
# Warmup Iteration   6: 2066.595 ops/min
# Warmup Iteration   7: 2060.159 ops/min
Iteration   1: 2067.610 ops/min
Iteration   2: 2065.044 ops/min
Iteration   3: 2067.795 ops/min


Result "org.ojalgo.benchmark.lab.FillByMultiplying.execute":
  2066.816 ±(99.9%) 28.048 ops/min [Average]
  (min, avg, max) = (2065.044, 2066.816, 2067.795), stdev = 1.537
  CI (99.9%): [2038.768, 2094.865] (assumes normal distribution)


# JMH version: 1.22
# VM version: JDK 13.0.1, OpenJDK 64-Bit Server VM, 13.0.1+9
# VM invoker: /home/anders/jdk-13.0.1+9/bin/java
# VM options: -Xmx6g
# Warmup: 7 iterations, 10 s each
# Measurement: 3 iterations, 10 s each
# Timeout: 1 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.ojalgo.benchmark.lab.FillByMultiplying.execute
# Parameters: (dim = 350, lib = ojAlgo)

# Run progress: 50.00% complete, ETA 00:23:27
# Fork: 1 of 1
# Warmup Iteration   1: 3022.694 ops/min
# Warmup Iteration   2: 3144.600 ops/min
# Warmup Iteration   3: 3279.643 ops/min
# Warmup Iteration   4: 3265.225 ops/min
# Warmup Iteration   5: 3267.470 ops/min
# Warmup Iteration   6: 3282.424 ops/min
# Warmup Iteration   7: 3178.264 ops/min
Iteration   1: 3118.703 ops/min
Iteration   2: 3293.493 ops/min
Iteration   3: 3296.029 ops/min


Result "org.ojalgo.benchmark.lab.FillByMultiplying.execute":
  3236.075 ±(99.9%) 1854.568 ops/min [Average]
  (min, avg, max) = (3118.703, 3236.075, 3296.029), stdev = 101.655
  CI (99.9%): [1381.507, 5090.642] (assumes normal distribution)


# JMH version: 1.22
# VM version: JDK 13.0.1, OpenJDK 64-Bit Server VM, 13.0.1+9
# VM invoker: /home/anders/jdk-13.0.1+9/bin/java
# VM options: -Xmx6g
# Warmup: 7 iterations, 10 s each
# Measurement: 3 iterations, 10 s each
# Timeout: 1 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.ojalgo.benchmark.lab.FillByMultiplying.execute
# Parameters: (dim = 350, lib = MTJ)

# Run progress: 53.57% complete, ETA 00:21:46
# Fork: 1 of 1
# Warmup Iteration   1: Nov 04, 2019 8:56:25 PM com.github.fommil.netlib.BLAS <clinit>
WARNING: Failed to load implementation from: com.github.fommil.netlib.NativeSystemBLAS
Nov 04, 2019 8:56:25 PM com.github.fommil.jni.JniLoader liberalLoad
INFO: successfully loaded /tmp/jniloader4174919221989238210netlib-native_ref-linux-x86_64.so
2661.003 ops/min
# Warmup Iteration   2: 2703.981 ops/min
# Warmup Iteration   3: 2694.467 ops/min
# Warmup Iteration   4: 2705.411 ops/min
# Warmup Iteration   5: 2702.377 ops/min
# Warmup Iteration   6: 2705.593 ops/min
# Warmup Iteration   7: 2683.914 ops/min
Iteration   1: 2689.903 ops/min
Iteration   2: 2705.330 ops/min
Iteration   3: 2693.877 ops/min


Result "org.ojalgo.benchmark.lab.FillByMultiplying.execute":
  2696.370 ±(99.9%) 146.137 ops/min [Average]
  (min, avg, max) = (2689.903, 2696.370, 2705.330), stdev = 8.010
  CI (99.9%): [2550.233, 2842.507] (assumes normal distribution)


# JMH version: 1.22
# VM version: JDK 13.0.1, OpenJDK 64-Bit Server VM, 13.0.1+9
# VM invoker: /home/anders/jdk-13.0.1+9/bin/java
# VM options: -Xmx6g
# Warmup: 7 iterations, 10 s each
# Measurement: 3 iterations, 10 s each
# Timeout: 1 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.ojalgo.benchmark.lab.FillByMultiplying.execute
# Parameters: (dim = 500, lib = ACM)

# Run progress: 57.14% complete, ETA 00:20:06
# Fork: 1 of 1
# Warmup Iteration   1: 267.640 ops/min
# Warmup Iteration   2: 268.689 ops/min
# Warmup Iteration   3: 270.078 ops/min
# Warmup Iteration   4: 271.942 ops/min
# Warmup Iteration   5: 269.969 ops/min
# Warmup Iteration   6: 270.426 ops/min
# Warmup Iteration   7: 269.945 ops/min
Iteration   1: 269.208 ops/min
Iteration   2: 271.411 ops/min
Iteration   3: 270.277 ops/min


Result "org.ojalgo.benchmark.lab.FillByMultiplying.execute":
  270.299 ±(99.9%) 20.094 ops/min [Average]
  (min, avg, max) = (269.208, 270.299, 271.411), stdev = 1.101
  CI (99.9%): [250.205, 290.392] (assumes normal distribution)


# JMH version: 1.22
# VM version: JDK 13.0.1, OpenJDK 64-Bit Server VM, 13.0.1+9
# VM invoker: /home/anders/jdk-13.0.1+9/bin/java
# VM options: -Xmx6g
# Warmup: 7 iterations, 10 s each
# Measurement: 3 iterations, 10 s each
# Timeout: 1 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.ojalgo.benchmark.lab.FillByMultiplying.execute
# Parameters: (dim = 500, lib = EJML)

# Run progress: 60.71% complete, ETA 00:18:26
# Fork: 1 of 1
# Warmup Iteration   1: 705.055 ops/min
# Warmup Iteration   2: 710.686 ops/min
# Warmup Iteration   3: 712.083 ops/min
# Warmup Iteration   4: 710.874 ops/min
# Warmup Iteration   5: 710.539 ops/min
# Warmup Iteration   6: 712.460 ops/min
# Warmup Iteration   7: 709.464 ops/min
Iteration   1: 710.595 ops/min
Iteration   2: 711.850 ops/min
Iteration   3: 712.043 ops/min


Result "org.ojalgo.benchmark.lab.FillByMultiplying.execute":
  711.496 ±(99.9%) 14.338 ops/min [Average]
  (min, avg, max) = (710.595, 711.496, 712.043), stdev = 0.786
  CI (99.9%): [697.158, 725.834] (assumes normal distribution)


# JMH version: 1.22
# VM version: JDK 13.0.1, OpenJDK 64-Bit Server VM, 13.0.1+9
# VM invoker: /home/anders/jdk-13.0.1+9/bin/java
# VM options: -Xmx6g
# Warmup: 7 iterations, 10 s each
# Measurement: 3 iterations, 10 s each
# Timeout: 1 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.ojalgo.benchmark.lab.FillByMultiplying.execute
# Parameters: (dim = 500, lib = ojAlgo)

# Run progress: 64.29% complete, ETA 00:16:46
# Fork: 1 of 1
# Warmup Iteration   1: 1036.080 ops/min
# Warmup Iteration   2: 1047.456 ops/min
# Warmup Iteration   3: 1045.577 ops/min
# Warmup Iteration   4: 1049.442 ops/min
# Warmup Iteration   5: 1077.220 ops/min
# Warmup Iteration   6: 1139.549 ops/min
# Warmup Iteration   7: 1137.154 ops/min
Iteration   1: 1138.354 ops/min
Iteration   2: 1141.374 ops/min
Iteration   3: 1137.155 ops/min


Result "org.ojalgo.benchmark.lab.FillByMultiplying.execute":
  1138.961 ±(99.9%) 39.664 ops/min [Average]
  (min, avg, max) = (1137.155, 1138.961, 1141.374), stdev = 2.174
  CI (99.9%): [1099.297, 1178.625] (assumes normal distribution)


# JMH version: 1.22
# VM version: JDK 13.0.1, OpenJDK 64-Bit Server VM, 13.0.1+9
# VM invoker: /home/anders/jdk-13.0.1+9/bin/java
# VM options: -Xmx6g
# Warmup: 7 iterations, 10 s each
# Measurement: 3 iterations, 10 s each
# Timeout: 1 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.ojalgo.benchmark.lab.FillByMultiplying.execute
# Parameters: (dim = 500, lib = MTJ)

# Run progress: 67.86% complete, ETA 00:15:05
# Fork: 1 of 1
# Warmup Iteration   1: Nov 04, 2019 9:03:09 PM com.github.fommil.netlib.BLAS <clinit>
WARNING: Failed to load implementation from: com.github.fommil.netlib.NativeSystemBLAS
Nov 04, 2019 9:03:09 PM com.github.fommil.jni.JniLoader liberalLoad
INFO: successfully loaded /tmp/jniloader6816535850649685536netlib-native_ref-linux-x86_64.so
924.479 ops/min
# Warmup Iteration   2: 937.386 ops/min
# Warmup Iteration   3: 939.407 ops/min
# Warmup Iteration   4: 940.159 ops/min
# Warmup Iteration   5: 940.621 ops/min
# Warmup Iteration   6: 942.625 ops/min
# Warmup Iteration   7: 940.068 ops/min
Iteration   1: 938.921 ops/min
Iteration   2: 939.011 ops/min
Iteration   3: 937.494 ops/min


Result "org.ojalgo.benchmark.lab.FillByMultiplying.execute":
  938.476 ±(99.9%) 15.524 ops/min [Average]
  (min, avg, max) = (937.494, 938.476, 939.011), stdev = 0.851
  CI (99.9%): [922.952, 953.999] (assumes normal distribution)


# JMH version: 1.22
# VM version: JDK 13.0.1, OpenJDK 64-Bit Server VM, 13.0.1+9
# VM invoker: /home/anders/jdk-13.0.1+9/bin/java
# VM options: -Xmx6g
# Warmup: 7 iterations, 10 s each
# Measurement: 3 iterations, 10 s each
# Timeout: 1 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.ojalgo.benchmark.lab.FillByMultiplying.execute
# Parameters: (dim = 750, lib = ACM)

# Run progress: 71.43% complete, ETA 00:13:25
# Fork: 1 of 1
# Warmup Iteration   1: 77.952 ops/min
# Warmup Iteration   2: 79.113 ops/min
# Warmup Iteration   3: 78.409 ops/min
# Warmup Iteration   4: 78.145 ops/min
# Warmup Iteration   5: 78.288 ops/min
# Warmup Iteration   6: 78.438 ops/min
# Warmup Iteration   7: 79.500 ops/min
Iteration   1: 79.497 ops/min
Iteration   2: 79.179 ops/min
Iteration   3: 79.856 ops/min


Result "org.ojalgo.benchmark.lab.FillByMultiplying.execute":
  79.510 ±(99.9%) 6.182 ops/min [Average]
  (min, avg, max) = (79.179, 79.510, 79.856), stdev = 0.339
  CI (99.9%): [73.328, 85.693] (assumes normal distribution)


# JMH version: 1.22
# VM version: JDK 13.0.1, OpenJDK 64-Bit Server VM, 13.0.1+9
# VM invoker: /home/anders/jdk-13.0.1+9/bin/java
# VM options: -Xmx6g
# Warmup: 7 iterations, 10 s each
# Measurement: 3 iterations, 10 s each
# Timeout: 1 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.ojalgo.benchmark.lab.FillByMultiplying.execute
# Parameters: (dim = 750, lib = EJML)

# Run progress: 75.00% complete, ETA 00:11:46
# Fork: 1 of 1
# Warmup Iteration   1: 208.217 ops/min
# Warmup Iteration   2: 210.271 ops/min
# Warmup Iteration   3: 209.979 ops/min
# Warmup Iteration   4: 210.938 ops/min
# Warmup Iteration   5: 210.812 ops/min
# Warmup Iteration   6: 210.581 ops/min
# Warmup Iteration   7: 209.287 ops/min
Iteration   1: 210.874 ops/min
Iteration   2: 210.575 ops/min
Iteration   3: 210.927 ops/min


Result "org.ojalgo.benchmark.lab.FillByMultiplying.execute":
  210.792 ±(99.9%) 3.457 ops/min [Average]
  (min, avg, max) = (210.575, 210.792, 210.927), stdev = 0.190
  CI (99.9%): [207.335, 214.249] (assumes normal distribution)


# JMH version: 1.22
# VM version: JDK 13.0.1, OpenJDK 64-Bit Server VM, 13.0.1+9
# VM invoker: /home/anders/jdk-13.0.1+9/bin/java
# VM options: -Xmx6g
# Warmup: 7 iterations, 10 s each
# Measurement: 3 iterations, 10 s each
# Timeout: 1 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.ojalgo.benchmark.lab.FillByMultiplying.execute
# Parameters: (dim = 750, lib = ojAlgo)

# Run progress: 78.57% complete, ETA 00:10:06
# Fork: 1 of 1
# Warmup Iteration   1: 313.988 ops/min
# Warmup Iteration   2: 316.547 ops/min
# Warmup Iteration   3: 316.089 ops/min
# Warmup Iteration   4: 316.955 ops/min
# Warmup Iteration   5: 316.946 ops/min
# Warmup Iteration   6: 315.539 ops/min
# Warmup Iteration   7: 316.134 ops/min
Iteration   1: 314.197 ops/min
Iteration   2: 314.721 ops/min
Iteration   3: 316.595 ops/min


Result "org.ojalgo.benchmark.lab.FillByMultiplying.execute":
  315.171 ±(99.9%) 23.004 ops/min [Average]
  (min, avg, max) = (314.197, 315.171, 316.595), stdev = 1.261
  CI (99.9%): [292.167, 338.174] (assumes normal distribution)


# JMH version: 1.22
# VM version: JDK 13.0.1, OpenJDK 64-Bit Server VM, 13.0.1+9
# VM invoker: /home/anders/jdk-13.0.1+9/bin/java
# VM options: -Xmx6g
# Warmup: 7 iterations, 10 s each
# Measurement: 3 iterations, 10 s each
# Timeout: 1 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.ojalgo.benchmark.lab.FillByMultiplying.execute
# Parameters: (dim = 750, lib = MTJ)

# Run progress: 82.14% complete, ETA 00:08:25
# Fork: 1 of 1
# Warmup Iteration   1: Nov 04, 2019 9:10:00 PM com.github.fommil.netlib.BLAS <clinit>
WARNING: Failed to load implementation from: com.github.fommil.netlib.NativeSystemBLAS
Nov 04, 2019 9:10:00 PM com.github.fommil.jni.JniLoader liberalLoad
INFO: successfully loaded /tmp/jniloader474597273740787578netlib-native_ref-linux-x86_64.so
274.425 ops/min
# Warmup Iteration   2: 279.293 ops/min
# Warmup Iteration   3: 281.124 ops/min
# Warmup Iteration   4: 281.423 ops/min
# Warmup Iteration   5: 280.385 ops/min
# Warmup Iteration   6: 280.689 ops/min
# Warmup Iteration   7: 280.888 ops/min
Iteration   1: 280.849 ops/min
Iteration   2: 280.314 ops/min
Iteration   3: 280.948 ops/min


Result "org.ojalgo.benchmark.lab.FillByMultiplying.execute":
  280.703 ±(99.9%) 6.224 ops/min [Average]
  (min, avg, max) = (280.314, 280.703, 280.948), stdev = 0.341
  CI (99.9%): [274.479, 286.927] (assumes normal distribution)


# JMH version: 1.22
# VM version: JDK 13.0.1, OpenJDK 64-Bit Server VM, 13.0.1+9
# VM invoker: /home/anders/jdk-13.0.1+9/bin/java
# VM options: -Xmx6g
# Warmup: 7 iterations, 10 s each
# Measurement: 3 iterations, 10 s each
# Timeout: 1 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.ojalgo.benchmark.lab.FillByMultiplying.execute
# Parameters: (dim = 1000, lib = ACM)

# Run progress: 85.71% complete, ETA 00:06:44
# Fork: 1 of 1
# Warmup Iteration   1: 20.738 ops/min
# Warmup Iteration   2: 21.056 ops/min
# Warmup Iteration   3: 23.182 ops/min
# Warmup Iteration   4: 22.072 ops/min
# Warmup Iteration   5: 20.857 ops/min
# Warmup Iteration   6: 20.858 ops/min
# Warmup Iteration   7: 19.493 ops/min
Iteration   1: 20.921 ops/min
Iteration   2: 21.441 ops/min
Iteration   3: 20.861 ops/min


Result "org.ojalgo.benchmark.lab.FillByMultiplying.execute":
  21.074 ±(99.9%) 5.819 ops/min [Average]
  (min, avg, max) = (20.861, 21.074, 21.441), stdev = 0.319
  CI (99.9%): [15.256, 26.893] (assumes normal distribution)


# JMH version: 1.22
# VM version: JDK 13.0.1, OpenJDK 64-Bit Server VM, 13.0.1+9
# VM invoker: /home/anders/jdk-13.0.1+9/bin/java
# VM options: -Xmx6g
# Warmup: 7 iterations, 10 s each
# Measurement: 3 iterations, 10 s each
# Timeout: 1 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.ojalgo.benchmark.lab.FillByMultiplying.execute
# Parameters: (dim = 1000, lib = EJML)

# Run progress: 89.29% complete, ETA 00:05:04
# Fork: 1 of 1
# Warmup Iteration   1: 85.492 ops/min
# Warmup Iteration   2: 86.141 ops/min
# Warmup Iteration   3: 86.404 ops/min
# Warmup Iteration   4: 86.927 ops/min
# Warmup Iteration   5: 86.245 ops/min
# Warmup Iteration   6: 86.524 ops/min
# Warmup Iteration   7: 85.995 ops/min
Iteration   1: 83.654 ops/min
Iteration   2: 86.522 ops/min
Iteration   3: 86.423 ops/min


Result "org.ojalgo.benchmark.lab.FillByMultiplying.execute":
  85.533 ±(99.9%) 29.703 ops/min [Average]
  (min, avg, max) = (83.654, 85.533, 86.522), stdev = 1.628
  CI (99.9%): [55.830, 115.236] (assumes normal distribution)


# JMH version: 1.22
# VM version: JDK 13.0.1, OpenJDK 64-Bit Server VM, 13.0.1+9
# VM invoker: /home/anders/jdk-13.0.1+9/bin/java
# VM options: -Xmx6g
# Warmup: 7 iterations, 10 s each
# Measurement: 3 iterations, 10 s each
# Timeout: 1 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.ojalgo.benchmark.lab.FillByMultiplying.execute
# Parameters: (dim = 1000, lib = ojAlgo)

# Run progress: 92.86% complete, ETA 00:03:23
# Fork: 1 of 1
# Warmup Iteration   1: 131.872 ops/min
# Warmup Iteration   2: 132.604 ops/min
# Warmup Iteration   3: 132.688 ops/min
# Warmup Iteration   4: 132.838 ops/min
# Warmup Iteration   5: 132.071 ops/min
# Warmup Iteration   6: 132.215 ops/min
# Warmup Iteration   7: 132.376 ops/min
Iteration   1: 132.611 ops/min
Iteration   2: 132.065 ops/min
Iteration   3: 132.046 ops/min


Result "org.ojalgo.benchmark.lab.FillByMultiplying.execute":
  132.241 ±(99.9%) 5.847 ops/min [Average]
  (min, avg, max) = (132.046, 132.241, 132.611), stdev = 0.321
  CI (99.9%): [126.393, 138.088] (assumes normal distribution)


# JMH version: 1.22
# VM version: JDK 13.0.1, OpenJDK 64-Bit Server VM, 13.0.1+9
# VM invoker: /home/anders/jdk-13.0.1+9/bin/java
# VM options: -Xmx6g
# Warmup: 7 iterations, 10 s each
# Measurement: 3 iterations, 10 s each
# Timeout: 1 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.ojalgo.benchmark.lab.FillByMultiplying.execute
# Parameters: (dim = 1000, lib = MTJ)

# Run progress: 96.43% complete, ETA 00:01:41
# Fork: 1 of 1
# Warmup Iteration   1: Nov 04, 2019 9:17:04 PM com.github.fommil.netlib.BLAS <clinit>
WARNING: Failed to load implementation from: com.github.fommil.netlib.NativeSystemBLAS
Nov 04, 2019 9:17:05 PM com.github.fommil.jni.JniLoader liberalLoad
INFO: successfully loaded /tmp/jniloader9352456515113642819netlib-native_ref-linux-x86_64.so
114.312 ops/min
# Warmup Iteration   2: 115.708 ops/min
# Warmup Iteration   3: 116.274 ops/min
# Warmup Iteration   4: 117.217 ops/min
# Warmup Iteration   5: 117.234 ops/min
# Warmup Iteration   6: 116.526 ops/min
# Warmup Iteration   7: 118.140 ops/min
Iteration   1: 118.006 ops/min
Iteration   2: 118.377 ops/min
Iteration   3: 118.606 ops/min


Result "org.ojalgo.benchmark.lab.FillByMultiplying.execute":
  118.329 ±(99.9%) 5.528 ops/min [Average]
  (min, avg, max) = (118.006, 118.329, 118.606), stdev = 0.303
  CI (99.9%): [112.802, 123.857] (assumes normal distribution)


# Run complete. Total time: 00:47:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                  (dim)   (lib)   Mode  Cnt       Score      Error    Units
FillByMultiplying.execute    100     ACM  thrpt    3   37115.887 ±  687.828  ops/min
FillByMultiplying.execute    100    EJML  thrpt    3   87790.673 ±  796.002  ops/min
FillByMultiplying.execute    100  ojAlgo  thrpt    3   87325.753 ± 6135.606  ops/min
FillByMultiplying.execute    100     MTJ  thrpt    3  104794.019 ± 3446.852  ops/min
FillByMultiplying.execute    150     ACM  thrpt    3   11672.083 ±  608.288  ops/min
FillByMultiplying.execute    150    EJML  thrpt    3   26182.530 ±  356.135  ops/min
FillByMultiplying.execute    150  ojAlgo  thrpt    3   30904.017 ± 1031.308  ops/min
FillByMultiplying.execute    150     MTJ  thrpt    3   30448.807 ±  739.656  ops/min
FillByMultiplying.execute    200     ACM  thrpt    3    4776.453 ±  129.321  ops/min
FillByMultiplying.execute    200    EJML  thrpt    3   11119.406 ±  326.273  ops/min
FillByMultiplying.execute    200  ojAlgo  thrpt    3   15517.125 ±  313.254  ops/min
FillByMultiplying.execute    200     MTJ  thrpt    3   13910.212 ±  801.711  ops/min
FillByMultiplying.execute    350     ACM  thrpt    3     860.700 ±   26.260  ops/min
FillByMultiplying.execute    350    EJML  thrpt    3    2066.816 ±   28.048  ops/min
FillByMultiplying.execute    350  ojAlgo  thrpt    3    3236.075 ± 1854.568  ops/min
FillByMultiplying.execute    350     MTJ  thrpt    3    2696.370 ±  146.137  ops/min
FillByMultiplying.execute    500     ACM  thrpt    3     270.299 ±   20.094  ops/min
FillByMultiplying.execute    500    EJML  thrpt    3     711.496 ±   14.338  ops/min
FillByMultiplying.execute    500  ojAlgo  thrpt    3    1138.961 ±   39.664  ops/min
FillByMultiplying.execute    500     MTJ  thrpt    3     938.476 ±   15.524  ops/min
FillByMultiplying.execute    750     ACM  thrpt    3      79.510 ±    6.182  ops/min
FillByMultiplying.execute    750    EJML  thrpt    3     210.792 ±    3.457  ops/min
FillByMultiplying.execute    750  ojAlgo  thrpt    3     315.171 ±   23.004  ops/min
FillByMultiplying.execute    750     MTJ  thrpt    3     280.703 ±    6.224  ops/min
FillByMultiplying.execute   1000     ACM  thrpt    3      21.074 ±    5.819  ops/min
FillByMultiplying.execute   1000    EJML  thrpt    3      85.533 ±   29.703  ops/min
FillByMultiplying.execute   1000  ojAlgo  thrpt    3     132.241 ±    5.847  ops/min
FillByMultiplying.execute   1000     MTJ  thrpt    3     118.329 ±    5.528  ops/min

Benchmark result is saved to jmh-result.csv
